from collections import defaultdict

desc = defaultdict(str)

desc["maternal_health_risk"] = """
<dataset>
Your task is to predict maternal health risk level during pregnancy.  
This dataset was collected from hospitals, community clinics, and maternal healthcare centers via an IoT-based risk monitoring system.

Size: {num_samples} total (train and val)

Feature descriptions:
- `Age`: Integer. Age of the woman in years during pregnancy.
- `SystolicBP`: Integer. Systolic (upper) blood pressure in mmHg.
- `DiastolicBP`: Integer. Diastolic (lower) blood pressure in mmHg.
- `BS`: Float. Blood glucose level (mmol/L).
- `HeartRate`: Integer. Resting heart rate in beats per minute.

Targets: `RiskLevel` — categorical. Predicted maternal risk intensity level (low, mid, high).
Metric: {metric}
</dataset>
"""

desc["hazelnut-spread-contaminant-detection"] = """
<dataset>
Your task is to detect contaminants in cocoa-hazelnut spread jars using microwave sensing (MWS).  
Each instance consists of scattering parameters recorded at 9.0 GHz frequency with antennas illuminating the jar.  
The dataset captures whether a jar contains contaminants and, if so, the type and placement.

Size: {num_samples} total (train and val)

Feature descriptions:
- `s12_real`, `s12_img`, `s13_real`, `s13_img`, … : Float. Real and imaginary parts of the scattering matrix elements (30 features total).
- Attributes represent the upper triangular elements of a 6×6 scattering matrix, excluding self-scattering.

Targets: Categorical label (11 classes). 0 = uncontaminated; other classes represent specific contaminant types (plastic, glass, metal) and positions (`surface` vs `middle`).  
Metric: {metric}
</dataset>
"""

desc["airfoil_self_noise"] = """
<dataset>
Your task is to predict scaled sound pressure level (dB) generated by airfoils.  
This NASA dataset contains aerodynamic and acoustic measurements collected in a wind tunnel to study airfoil self-noise.

Size: {num_samples} total (train and val)

Feature descriptions:
- `Frequency`: Float. Frequency in Hz.
- `AngleOfAttack`: Float. Angle of attack in degrees.
- `ChordLength`: Float. Chord length of the airfoil in meters.
- `FreeStreamVelocity`: Float. Free-stream velocity in m/s.
- `SuctionSideDisplacement`: Float. Suction side displacement thickness in meters.

Targets: `SoundPressureLevel` — Float. Scaled sound pressure level (dB).  
Metric: {metric}
</dataset>
"""

desc["concrete_compressive_strength"] = """
<dataset>
Your task is to estimate the concrete compressive strength.  
Concrete is the most important material in civil engineering, and its strength is a nonlinear function of age and ingredients.

Size: {num_samples} total (train and val)

Feature descriptions:
- `Cement`: Float. Cement ingredient (kg/m^3).
- `BlastFurnaceSlag`: Float. Blast Furnace Slag ingredient (kg/m^3).
- `FlyAsh`: Float. Fly Ash ingredient (kg/m^3).
- `Water`: Float. Water ingredient (kg/m^3).
- `Superplasticizer`: Float. Superplasticizer ingredient (kg/m^3).
- `CoarseAggregate`: Float. Coarse Aggregate ingredient (kg/m^3).
- `FineAggregate`: Float. Fine Aggregate ingredient (kg/m^3).
- `Age`: Integer. Curing time in days.

Targets: Concrete compressive strength in MPa.  
Metric: {metric}

The actual strength values were measured in a laboratory. Data is in raw form (not scaled).
</dataset>
"""

desc["anneal"] = """
<dataset>
Your task is to classify the steel annealing condition.  
The dataset contains descriptions of steel production and annealing processes with categorical and continuous variables.

Size: {num_samples} total (train and val)

Feature descriptions:
- `family`: Categorical. Steel family (GB, GK, GS, TN, ZA, ZF, ZH, ZM, ZS, --).
- `product_type`: Categorical. Product type (C, H, G).
- `steel`: Categorical. Steel symbol (R, A, U, K, M, S, W, V, --).
- `carbon`: Float. Carbon content.
- `hardness`: Float. Hardness value.
- `temper_rolling`: Categorical. Temper rolling (T, --).
- `condition`: Categorical. Condition (S, A, X, --).
- `formability`: Categorical. Formability rating (1–5, --).
- `strength`: Float. Strength measurement.
- `non_ageing`: Categorical. Non-ageing indicator (N, --).
- `surface_finish`: Categorical. Surface finish (P, M, --).
- `surface_quality`: Categorical. Surface quality (D, E, F, G, --).
- `enamelability`: Categorical. Enamelability rating (1–5, --).
- `bc`, `bf`, `bt`, `bl`, `m`, `cbond`, `marvi`, `exptl`, `ferro`, `corr`, `lustre`, `jurofm`, `s`, `p`: Categorical. Various binary quality/chemical indicators (Y, --).
- `bw_me`: Categorical. BW/ME indicator (B, M, --).
- `chrom`: Categorical. Chromium indicator (C, --).
- `phos`: Categorical. Phosphorus indicator (P, --).
- `blue_bright_varn_clean`: Categorical. Appearance rating (B, R, V, C, --).
- `shape`: Categorical. Product shape (COIL, SHEET).
- `thickness`: Float. Thickness measurement.
- `width`: Float. Width measurement.
- `length`: Float. Length measurement.
- `oil`: Categorical. Oil presence (Y, N, --).
- `bore`: Categorical. Bore size (0000, 0500, 0600, 0760).
- `packing`: Categorical. Packing code (1, 2, 3, --).

Targets: Multiclass annealing condition label.  
Metric: {metric}
</dataset>
"""

desc["Another-Dataset-on-used-Fiat-500"] = """
<dataset>
Your task is to predict the selling price of used Fiat 500 cars in Italy.  
This dataset was collected from a website specializing in used cars, with listings across multiple regions.

Size: {num_samples} total (train and val)

Feature descriptions:
- `model`: Categorical. Trim/version of the Fiat 500 (e.g., 'pop', 'lounge', 'sport').
- `engine_power`: Float. Engine power in kilowatts (kW).
- `age_in_days`: Float. Age of the car in days (measured from dataset collection date).
- `km`: Float. Mileage of the car in kilometers.
- `previous_owners`: Integer. Number of previous owners.
- `lat`: Float. Latitude of the seller’s location.
- `lon`: Float. Longitude of the seller’s location.

Targets: `price` — Float. Selling price of the car.  
Metric: {metric}
</dataset>
"""

desc["blood-transfusion-service-center"] = """
<dataset>
Your task is to predict whether a donor donated blood in March 2007.  
This dataset comes from the Blood Transfusion Service Center in Hsin-Chu City, Taiwan. Donors were selected randomly, and each record follows the RFMTC (Recency, Frequency, Monetary, Time, and response) model.

Size: {num_samples} total (train and val)

Feature descriptions:
- `MonthsSinceLastDonation`: Integer. Months since the donor's last donation.
- `NumberOfDonations`: Integer. Total number of donations made.
- `TotalBloodDonated`: Integer. Total volume of blood donated (c.c.).
- `MonthsSinceFirstDonation`: Integer. Months since the donor’s first donation.

Targets: Binary label — 1 if the donor gave blood in March 2007, 0 otherwise.  
Metric: {metric}
</dataset>
"""

desc["credit-g"] = """
<dataset>
Your task is to predict whether a credit applicant is considered a good (lower risk) or bad (higher risk) customer.  
This dataset contains credit application records from a German bank, describing applicants’ financial and personal situations.

Size: {num_samples} total (train and val)

Feature descriptions:
- `checking_status`: Categorical. Status of existing checking account ('<0', '0<=X<200', '>=200', 'no checking').
- `duration_months`: Integer. Duration of loan in months.
- `credit_history`: Categorical. Past credit repayment status.
- `credit_purpose`: Categorical. Purpose of the loan (e.g. new car, repairs, education).
- `credit_amount`: Float. Amount of credit requested.
- `savings_status`: Categorical. Level of savings/bonds.
- `employment_since`: Categorical. Current employment duration.
- `installment_rate_percent`: Float. Installment rate as % of disposable income.
- `personal_status_sex`: Categorical. Personal status and sex.
- `other_debtors`: Categorical. Other debtors/guarantors.
- `residence_since`: Integer. Duration at current residence (years).
- `property`: Categorical. Property/assets owned.
- `age_years`: Integer. Applicant’s age.
- `other_installment_plans`: Categorical. Other installment plans (bank, stores, none).
- `housing`: Categorical. Housing status (rent, own, free).
- `existing_credits_count`: Integer. Number of existing credits at this bank.
- `job`: Categorical. Job type/qualification.
- `people_liable`: Integer. Number of dependents.
- `telephone`: Categorical. Telephone availability.
- `foreign_worker`: Categorical. Whether the applicant is a foreign worker.

Targets: `class` — binary credit risk label (`good` = 1, `bad` = 0).  
Metric: {metric}

Note: categorical features must be encoded before training.
</dataset>
"""

desc["diabetes"] = """
<dataset>
Your task is to predict whether a patient is likely to be diagnosed with diabetes.  
This dataset contains diagnostic measurements of patients and is widely used in healthcare ML tasks.

Size: {num_samples} total (train and val)

Feature descriptions:
- `Pregnancies`: Integer. Number of times the patient has been pregnant.
- `Glucose`: Integer. Plasma glucose concentration from an oral glucose tolerance test.
- `BloodPressure`: Integer. Diastolic blood pressure (mm Hg).
- `SkinThickness`: Integer. Triceps skinfold thickness (mm).
- `Insulin`: Integer. 2-hour serum insulin (mu U/ml).
- `BMI`: Float. Body mass index (kg/m^2).
- `DiabetesPedigreeFunction`: Float. Family history–based diabetes likelihood score.
- `Age`: Integer. Age in years.

Targets: Binary label — 1 if the patient has diabetes, 0 otherwise.  
Metric: {metric}
</dataset>
"""

desc["Marketing_Campaign"] = """
<dataset>
Your task is to predict whether a customer will respond to a marketing campaign offer.  
The dataset captures demographics, spending behavior, and past campaign responses.

Size: {num_samples} total (train and val)

Feature descriptions:
- `Year_Birth`: Integer. Customer’s year of birth.
- `Education`: Categorical. Customer’s education level.
- `Marital_Status`: Categorical. Customer’s marital status.
- `Income`: Float. Yearly household income.
- `Kidhome`: Integer. Number of small children at home.
- `Teenhome`: Integer. Number of teenagers at home.
- `Dt_Customer`: Date. Enrollment date with the company.
- `Recency`: Integer. Days since the last purchase.
- `MntWines`, `MntFruits`, `MntMeatProducts`, `MntFishProducts`, `MntSweetProducts`, `MntGoldProds`: Float. Amount spent on products in last 2 years.
- `NumDealsPurchases`: Integer. Purchases made with a discount.
- `NumWebPurchases`: Integer. Purchases via company website.
- `NumCatalogPurchases`: Integer. Purchases using catalogues.
- `NumStorePurchases`: Integer. Purchases made in-store.
- `NumWebVisitsMonth`: Integer. Website visits in the last month.
- `AcceptedCmp1`–`AcceptedCmp5`: Binary. Accepted offer in earlier campaigns (1 = yes, 0 = no).
- `Complain`: Binary. Customer complained in the last 2 years.

Targets: `Response` — binary. 1 if customer accepted the offer in the last campaign, 0 otherwise.  
Metric: {metric}

Note: categorical features must be encoded before training.
</dataset>
"""


desc["qsar-biodeg"] = """
<dataset>
Your task is to predict whether a chemical compound is ready biodegradable (RB) or not ready biodegradable (NRB).
The dataset contains 1055 molecules, each described by 41 molecular descriptors that capture structural and physicochemical properties of the compound. The target variable is whether the compound is classified as "ready biodegradable" (RB) or "not ready biodegradable" (NRB). This is a binary classification task with class imbalance (356 RB vs 699 NRB).

Size: {num_samples} total (train and val)

Feature descriptions:
- `Laplace_Leading_Eigenvalue`: Float. Leading eigenvalue from Laplace matrix.
- `Weighted_Balaban_Index_Barysz_Matrix`: Float. Balaban-like index from the Barysz matrix weighted by Sanderson electronegativity.
- `Num_Heavy_Atoms`: Integer. Number of heavy (non-hydrogen) atoms.
- `Freq_NN_At_Dist1`: Integer. Frequency of N–N at topological distance 1.
- `Freq_CN_At_Dist4`: Integer. Frequency of C–N at topological distance 4.
- `Num_ssssC_Atoms`: Integer. Number of ssssC-type atoms.
- `Num_Substituted_BenzeneC`: Integer. Number of substituted benzene C(sp2).
- `Percentage_C_Atoms`: Float. Percentage of carbon atoms.
- `Num_Terminal_PrimaryC`: Integer. Number of terminal primary C(sp3).
- `Num_Oxygen_Atoms`: Integer. Number of oxygen atoms.
- `Freq_CN_At_Dist3`: Integer. Frequency of C–N at topological distance 3.
- `Sum_dssC_EStates`: Float. Sum of dssC E-state values.
- `Weighted_HyperWiener_Index_Burden_Matrix`: Float. Hyper-Wiener-like index from Burden matrix weighted by mass.
- `Lopping_Centric_Index`: Float. Lopping centric index.
- `Laplace_Spectral_Moment6`: Float. Spectral moment of order 6 from Laplace matrix.
- `Freq_CO_At_Dist3`: Integer. Frequency of C–O at topological distance 3.
- `Mean_Sanderson_Electronegativity`: Float. Mean atomic Sanderson electronegativity (scaled on carbon).
- `Mean_Ionization_Potential`: Float. Mean first ionization potential (scaled on carbon).
- `Num_N_Hydrazine`: Integer. Number of N hydrazine groups.
- `Num_Aromatic_Nitro_Groups`: Integer. Number of aromatic nitro groups.
- `Num_CRX3`: Integer. Number of CRX3 substructures.
- `Weighted_Normalized_SpectralPositiveSum_Burden_Matrix`: Float. Normalized spectral positive sum from Burden matrix weighted by polarizability.
- `Num_Circuits`: Integer. Number of circuits (topological cycles).
- `Presence_CBr_At_Dist1`: Binary. Presence/absence of C–Br at topological distance 1.
- `Presence_CCl_At_Dist3`: Binary. Presence/absence of C–Cl at topological distance 3.
- `N073_chemical_substructure`: Integer/flag. Indicator of specific N-based chemical substructures.
- `Adjacency_LeadingEigenvalue`: Float. Leading eigenvalue from adjacency matrix.
- `Intrinsic_State_Pseudoconnectivity`: Float. Intrinsic state pseudoconnectivity index (type 1d).
- `Presence_CBr_At_Dist4`: Binary. Presence/absence of C–Br at topological distance 4.
- `Sum_dO_EStates`: Float. Sum of dO E-state values.
- `Laplace_MoharIndex2`: Float. Second Mohar index from Laplace matrix.
- `Num_RingTertiaryC`: Integer. Number of ring tertiary C(sp3).
- `C026_chemical_substructure`: Integer/flag. Indicator of R--CX--R substructure.
- `Freq_CN_At_Dist2`: Integer. Frequency of C–N at topological distance 2.
- `Num_HBond_Donors_Atoms`: Integer. Number of donor atoms for H-bonds (N and O).
- `Weighted_LeadingEigenvalue_Burden_Matrix`: Float. Leading eigenvalue from Burden matrix weighted by mass.
- `Intrinsic_State_Pseudoconnectivity_SAvg`: Float. Intrinsic state pseudoconnectivity index – S average.
- `Num_Nitrogen_Atoms`: Integer. Total number of nitrogen atoms.
- `Weighted_SpectralMoment6_Burden_Matrix`: Float. Spectral moment of order 6 from Burden matrix weighted by mass.
- `Num_Esters`: Integer. Number of aromatic esters.
- `Num_Halogen_Atoms`: Integer. Number of halogen atoms.

Targets: whether the compound is ready biodegradable (RB = 1) or not ready biodegradable (NRB = 0).
Metric: {metric}
</dataset>
"""


desc["QSAR_fish_toxicity"] = """
<dataset>
Your task is to predict the acute aquatic toxicity of chemical compounds on the fathead minnow (*Pimephales promelas*).  
Each compound is represented by 6 molecular descriptors, and the target is a quantitative toxicity response.

Size: {num_samples} total (train and val)

Feature descriptions:
- `CIC0`: Float. Information indices descriptor.
- `SM1_Dz(Z)`: Float. 2D matrix-based descriptor.
- `GATS1i`: Float. 2D autocorrelation descriptor.
- `NdsCH`: Integer. Atom-type count descriptor.
- `NdssC`: Integer. Atom-type count descriptor.
- `MLOGP`: Float. Molecular property descriptor.

Targets: Float. Quantitative LC50 toxicity, measured as –LOG(mol/L).  
Metric: {metric}
</dataset>
"""

desc["healthcare_insurance_expenses"] = """
<dataset>

Your task is to predict medical insurance costs for a given person. This dataset contains information on the relationship between personal attributes (age, gender, BMI, family size, smoking habits), geographic factors, and their impact on medical insurance charges. It can be used to study how these features influence insurance costs and develop predictive models for estimating healthcare expenses.

Size: {num_samples} total (train and val)
Feature descriptions:
- `age`: The insured person's age.
- `sex`: Gender (male or female) of the insured.
- `bmi`: (Body Mass Index): A measure of body fat based on height and weight.
- `children`: The number of dependents covered.
- `smoker`: Whether the insured is a smoker (yes or no).
- `region`: The geographic area of coverage, categorical feature.

Targets: Charges - the medical insurance costs incurred by the insured person.
Metric: {metric}

</dataset>
"""

desc["Fitness_Club"] = """
<dataset>
Your task is to predict if a fitness club member attended a class from their previous behavior and data.
GoalZone is a fitness club chain in Canada.
GoalZone offers a range of fitness classes in two capacities - 25 and 15.
Some classes are always fully booked. Fully booked classes often have a low attendance rate.
GoalZone wants to increase the number of spaces available for classes.
They want to do this by predicting whether the member will attend the class or not.
If they can predict a member will not attend the class, they can make another space available.

Size: {num_samples} total (train and val)
Feature descriptions:
- `months_as_member`: Discrete. The number of months as this fitness club member, minimum 1 month.
- `weight`: Continuous. The member's weight in kg, rounded to 2 decimal places.
- `days_before`: Discrete. The number of days before the class the member registered.
- `day_of_week`: Nominal. The day of the week of the class.
- `time`: The time of day of the class. Either AM or PM
- `category`: Nominal. The category of the fitness class.
Targets: Whether the member attended the class (1) or not (0).
Metric: {metric}

Note that the dataset contains categorical features that must be pre-processed as numerical features before it is fed into the tree.
</dataset>
"""

desc["Is-this-a-good-customer"] = """
<dataset>
Your task is to predict whether a new customer is a “good” customer (i.e. creditworthy) based on their demographic, financial, and behavioral attributes.

This dataset comes from a financial / consumer credit setting and suffers from **class imbalance** (the minority class—good customers—is underrepresented), so choosing an appropriate evaluation metric (rather than raw accuracy) is crucial.

Size: {num_samples} total (train + validation)
Feature descriptions (input columns):
- `month`: Integer. The month number of the application (or record).
- `credit_amount`: Continuous (or integer). The amount of credit requested / used.
- `credit_term`: Integer. The term (duration) of the credit.
- `age`: Integer. Age of the applicant (in years).
- `sex`: Categorical / nominal. Sex of the applicant (e.g. male, female).
- `education`: Categorical / nominal. Education level of the applicant.
- `product_type`: Categorical / nominal. Type of credit product.
- `having_children_flg`: Binary / categorical. Flag indicating whether the applicant has children.
- `region`: Categorical / nominal. Region / geographic area of the applicant.
- `income`: Continuous. Applicant’s income.
- `family_status`: Categorical / nominal. Family / marital status.
- `phone_operator`: Categorical / nominal. The telecom operator the applicant uses.
- `is_client`: Binary. Whether the person is already a client (existing customer) or not.

Target:
- A binary target variable indicating whether the applicant is a good customer (creditworthy) or bad (non-creditworthy).

Metric: {metric}

</dataset>
"""

desc["website_phishing"] = """
<dataset>  
Your task is to predict whether a given website is **legitimate**, **phishy**, or **suspicious** (3-class classification).  

This dataset was assembled from multiple sources to contrast phishing vs legitimate web pages. The original data contains 1,353 instances: 702 phishing sites, 548 legitimate sites, and 103 “suspicious” sites (i.e. ambiguous cases where both phishy and legitimate characteristics are present). Because phishing sites outnumber legitimate ones, there is a **class imbalance** to be aware of when training models. Additionally, the dataset contains a notable number of duplicate entries (~50%).

Size: {num_samples} total (train + validation)
Feature descriptions (input columns):
- `SFH`: Categorical / ordinal. Status of “\# Suspicious Forwarding Host” feature (indicator of forwarding / redirections).
- `popUpWidnow`: Categorical. Whether the site uses pop-up windows.
- `SSLfinal_State`: Categorical / ordinal. SSL certificate / state indicator.
- `Request_URL`: Categorical. Relationship of request URL to actual domain.
- `URL_of_Anchor`: Categorical. Proportion or pattern of anchor URLs relative to domain.
- `web_traffic`: Ordinal / categorical. Relative traffic rank or estimate of the website.
- `URL_Length`: Continuous (or integer). Length of the URL in characters.
- `age_of_domain`: Integer. Age (in days) of the domain.
- `having_IP_Address`: Binary / categorical. Whether the URL uses an IP address instead of a domain name.

Target:
- A 3-class label:
  - **0** = legitimate website
  - **1** = phishy website
  - **2** = suspicious website (shares features of both legitimate and phishing)

Metric: {metric}

</dataset>
"""

desc["MIC"] = """
<dataset>  
Your task is to predict **the outcome of a patient with myocardial infarction (MI)** based on clinical, laboratory, and ECG data collected during hospitalization.  

This dataset captures detailed medical features of patients admitted with MI, and the target variable reflects whether the patient survived without complications or developed one of several severe complications. Predicting complications is important for timely preventive interventions in critical care.  

The prediction task is **multiclass classification** with 8 possible outcomes (see below). The dataset also exhibits **class imbalance** — some complications are much rarer than others, making it important to use metrics beyond plain accuracy.  

Size: {num_samples} total (train + validation)  
Feature descriptions (input columns):  
- Clinical, anamnesis, comorbidities, vital signs, ECG, and lab test results. Actual column names include:  
  `AGE`, `SEX`, `INF_ANAM`, `STENOK_AN`, `FK_STENOK`, `IBS_POST`, `IBS_NASL`, `GB`, `SIM_GIPERT`, `DLIT_AG`, `ZSN_A`, … up to `TRENT_S_n`, `LET_IS`.  
- Altogether, there are over 100 predictive features covering:  
  - Patient demographics and history (`AGE`, `SEX`, `INF_ANAM`, etc.)  
  - Vital signs at admission (`S_AD_KBRIG`, `D_AD_KBRIG`, etc.)  
  - ECG patterns (`ritm_ecg_p_01`, `n_r_ecg_p_01`, etc.)  
  - Lab bloodwork results (`K_BLOOD`, `NA_BLOOD`, `AST_BLOOD`, etc.)  
  - Administered therapies (`LID_KB`, `NA_R_1_n`, `TRENT_S_n`, etc.)  

Target: `LET_IS` — a categorical variable with 8 possible classes:  
- `alive` (0)
- `asystole` (1)
- `cardiogenic_shock` (2)
- `myocardial_rupture` (3)
- `progress_congestive_heart_failure` (4)
- `pulmonary_edema` (5)
- `thromboembolism` (6)
- `ventricular_fibrillation` (7)

Metric: {metric}  

</dataset>
"""